locale: en-US
translations:
  ###########################################################################
  # General
  ###########################################################################

  - key: general.results.description
    t: The 2024 edition of the annual survey about the latest trends in the CSS ecosystem.

  - key: general.css2024.survey_intro
    t: |

      It's amazing to witness the speed at which CSS keeps evolving. While the past decade has been all about building a solid foundation for layout (Flexbox, Grid) and syntax (variables) the future promises to be about going much further than most of us ever dreamed of. 

      Want to calculate a square root or cosine in your CSS? Use that to build scroll-triggered animations? And maybe scope all of it down so it doesn't have any unwanted effects? Now you can do all that, and much more!

      Which is why this survey is more important than ever, not just as a way to keep track of your own progress; but also as a tool to let browser vendors know what we all think about this new direction.

      So once again, please join me for this year's State of CSS!

  - key: features.features_intro_css2024
    t: |
      Welcome to the survey! This first part is all about sharing your experience with various CSS features:


      - **Never heard of it**: it's your first time seeing this – or you've heard of it but have no idea what it does. 

      - **Heard of it**: you've read or learned about this, but haven't actually used it yet. 

      - **Used it**: you've used this at least once, even if it was just to play around. 


      By the way, if you want to tell us more about any of your choices, just click that little "comment" icon!

  ###########################################################################
  # Introduction
  ###########################################################################

  - key: introduction.css2024
    t: |
      <span class="first-letter">L</span>et me make a prediction: we'll look back at 2024 as the turning point between “CSS Classic” and “New CSS”.

      CSS Classic is how most of us have been writing CSS for years: using a limited set of features, and compensating for the language's limitations using outside tools such as libraries, pre- and post-processors, and strict methodologies. 

      New CSS on the other hand is an approach that embraces Subgrid, `:has()`, variables, container queries, and the many new and exciting CSS features introduced in recent years to not only do away with extra tooling, but even start taking on tasks that previously required complex JavaScript workarounds. 

      This is all possible thanks to a renewed comittment by browser vendors to, you know, actually *make this stuff work* – and I can't shake the feeling that we've barely scratched the surface of everything New CSS can offer. 

      <span class="conclusion__byline">– Sacha Greif</span>

  ###########################################################################
  # Tshirt
  ###########################################################################

  - key: sections.tshirt.title
    t: T-shirt

  - key: sections.tshirt.description
    t: |
      ## Support the Survey With the State of CSS T-Shirt

      Between the bad video quality, the bulky cassettes, and having to rewind, there's not much to miss about the VHS era. But one thing we *do* miss are the amazing 90s visuals that used to adorn blank VHS tapes. 

      But now, thanks to the talented Christopher Kirk-Nielsen you can enjoy all this retro radness while also celebrating your love for CSS at the same time!

  - key: tshirt.about
    t: About the T-shirt

  - key: tshirt.description
    t: |
      We use a high-quality, super-soft tri-blend shirt with a slim fit printed by our partners at Cotton Bureau.

  - key: tshirt.getit
    t: Get It

  - key: tshirt.price
    t: USD $29 + shipping

  - key: tshirt.designer.heading
    t: About the Designer

  - key: tshirt.designer.name
    t: Christopher Kirk-Nielsen

  - key: tshirt.designer.bio
    t: |
      Originally from France but now based in the United States, Chris is not just an amazing front-end developer, but also a talented illustrator who specializes in retro visuals. In fact, we encourage you to also check out his [other t-shirt designs](https://chriskirknielsen.com/designs)!

  ###########################################################################
  # Sections Introductions
  ###########################################################################

  - key: sections.user_info.description.css2024
    t: |
      This year's survey reached **9,704** developers throughout the world.

  - key: sections.features.description.css2024
    t: |
      It's no secret that CSS is adding new features at a record rate – which is why we ended up asking about no less than *50* of them this year!

  - key: sections.tools.css2024
    t: Libraries & Tools

  - key: sections.tools.description.css2024
    t: |
      Despite the many capabilities unlocked by CSS's new features, developers still rely on tooling and libraries to support their workflow, at least for now.

  - key: sections.usage.description.css2024
    t: |
      No matter how you use CSS, the data shows that making sure your code works across all browsers is still a concern, especially for newer features such as `:has()`.

  - key: sections.resources.description.css2024
    t: |
      Rest assured: with the amount of new CSS features coming out, we won't run out of material for CSS blog posts, podcasts, videos, and courses anytime soon!

  ###########################################################################
  # Charts
  ###########################################################################

  # user_info

  - key: user_info.country.takeaway.css2024
    t: >
      While the U.S. still represented the largest single demographic, we were still happy to see a good mix of countries among the rest of our respondents – although Asia sadly continues to be under-represented.

  - key: user_info.locale.takeaway.css2024
    t: >
      Many thanks to our volunteer translators for making the surveys available in so many different languages!

  - key: user_info.completion_stats.takeaway.css2024
    t: >
      Despite the survey's length, an overwhelming majority of respondents took the time to complete it from start to finish!

  - key: user_info.age.takeaway.css2024
    t: >
      CSS isn't doing great among Gen Alpha respondents, possibly because they're too busy playing Fortnite. 

      Wait, Fortnite is still a thing right…?

  - key: user_info.years_of_experience.takeaway.css2024
    t: >
      This chart reveals that most respondents were lucky enough to never have to deal with `float`-based positioning.

  - key: user_info.company_size.takeaway.css2024
    t: >
      The larger the company, the higher the salary. Although if you're good enough, our data shows that you can earn a decent living no matter your company's size.

  - key: user_info.yearly_salary.takeaway.css2024
    t: >
      While we often hear tales of six-figure salaries out of Silicon Valley, the reality is that most front-end developers throughout the world earn far less, as becomes apparent when directly comparing the U.S. and the rest of the world.

  - key: user_info.higher_education_degree.takeaway.css2024
    t: >
      While having a degree will ensure you earn more, turns out it doesn't necessarily have to be related to programming – a good sign for the many among us who discovered a passion for web development further along in life.

  - key: user_info.gender.takeaway.css2024
    t: >
      Canada, Spain, the U.K., and the U.S. had the highest proportion of women respondents. 

      Our data also shows women's income to be lagging compared to other groups. While the reasons behind this are beyond the scope of this report, it’s clear that women in our industry do face some unique challenges.

  - key: user_info.race_ethnicity.takeaway.css2024
    t: >
      Non-white respondents were more likely to be younger and have less experience – which hopefully points to a ongoing diversification of the industry.

  - key: user_info.disability_status.takeaway.css2024
    t: >
      Thanks to the continued efforts of accessibility advocates, we now accept the fact that disabilities (permanent or not) should be taken into account as part of the design & development process.

  - key: user_info.source.takeaway.css2024
    t: >
      While most respondents knew about the survey from previous years, Kevin Powell also sent a large chunk of survey takers our way.

  # features

  - key: features.all_features
    t: Features

  - key: features.all_features.takeaway.css2024
    t: >
      Filter Effects (`blur()`, `contrast()`, etc.) were the unexpected most-used CSS feature of 2024, with 75.4% of respondents having used them; with the `:has()` selector a close second with 72.8%. 

      When ranking for sentiment on the other hand, Subgrid turned out to be the most loved feature, with 51.5% of respondents willing to use it again.

      The least-used feature? None other than `hanging-punctuation`, with 84.7% of respondents never having even heard about it!

  - key: features.reading_list.takeaway.css2024
    t: >
      The Reading List lets you save items you want to learn more about after the survey is complete. 

      So it's no coincidence that the least-known-about feature, `hanging-punctuation`, also tops our Reading List rankings as the item developers saved the most!

  # tools

  - key: tools.css_frameworks.takeaway.css2024
    t: >
      When it comes to CSS frameworks & UI libraries, Tailwind CSS continues to forge its own path far ahead of other, more traditional competitors.

  - key: tools.css_in_js.takeaway.css2024
    t: >
      While some of CSS-in-JS's appeal might've been made obsolete by newer CSS features such as variables, recent innovations like typed styles and build-time compilation show that the space still has a lot to offer.

  - key: tools.pre_post_processors.takeaway.css2024
    t: >
      Sass/SCSS is still the leader here, but it'll be interesting to see if its usage will remain stable now that many of its key features have been absorbed by CSS itself.

  - key: tools.utilities.takeaway.css2024
    t: >
      There is no shortage of ways to format, minify, and otherwise tweak your CSS code to your liking.

  - key: tools.browsers.takeaway.css2024
    t: >
      While the big four browsers dominate this chart, Arc is slowly creeping up the browser rankings, going from 7.8% to 12% usage year over year.

  # usage

  - key: usage.form_factors.takeaway.css2024
    t: >
      An encouraging sign of accessibility's growing importance, screen reader testing has gone up from 16.6% to 19% year-over-year.

  - key: usage.what_do_you_use_css_for.takeaway.css2024
    t: >
      While this data is unsurprising, it's a nice reminder that CSS can do a lot more than format webpages.

  - key: usage.industry_sector.takeaway.css2024
    t: >
      Did you know you can filter this survey's data by Industry Sector? Just click "Add Filters…" on any other chart!

  - key: usage.usage_type.takeaway.css2024
    t: >
      Whether you build websites profesionally or just dabble, there's no wrong way to use CSS!

  - key: usage.design_methodology.takeaway.css2024
    t: >
      While a large majority of respondents use CSS to implement pre-existing designs, it'll be interesting to see if this changes as design apps evolve, and AI tools become capable of going straight from idea to code.

  - key: usage.css_js_balance.takeaway.css2024
    t: >
      Even in the context of a CSS survey, it turns out a majority of respondents still spend most of their time in the JavaScript ecosystem. Only time will tell if this too will shift now that CSS is becoming more capable.

  - key: usage.css_interoperability_features.takeaway.css2024
    t: >
      There are few worse feelings that knowing a new feature will solve your issue perfectly, yet not being able to use it because of poor browser support. 


      This is the case with Anchor Positioning, a promising new feature that is sadly not yet broadly supported.


      Container Queries on the other hand *are* [available at a baseline level](https://web.dev/blog/cq-stable) and ready to be used, despite showing up in many respondent's answers!

  - key: usage.css_missing_features.takeaway.css2024
    t: >
      In the absence of a magic wand that lets us conjure up any CSS feature we can dream of, the best we can hope for is that this data can help push browser vendors in the right direction!


      The good news: conditional logic, mixins, and masonry layouts are all currently being worked on in some form or another!

  - key: usage.css_pain_points.takeaway.css2024
    t: >
      While browser support remains the eternal CSS pain point, Tailwind CSS is also proving to be a source of frustration for some – while others complain that it's not used enough!

  - key: usage.favorite_new_features.takeaway.css2024
    t: >
      Long-awaited feature, sensible implementation, good browser support: `:has()` has it all, and tops the rankings of the best new CSS feature of 2024!

  - key: usage.state_of_the_web_happiness.takeaway.css2024
    t: >
      While we do love to complain about the state of thigns, it turns out happiness levels have remained surprisingly constent over the years.

  - key: usage.state_of_css_happiness.takeaway.css2024
    t: >
      We are even seeing a slight uptick when it comes to CSS specifically, proof that the hard work by browser vendors, working groups, and the CSS community at large is not going unnoticed!

  # resources

  - key: resources.blogs_news_magazines.takeaway.css2024
    t: >
      Despite CSS-Tricks going through a change of ownership over the last few years, it's managed to hold onto its number one ranking when it comes to CSS blogs.

  - key: resources.courses.takeaway.css2024
    t: >
      Free resources like MDN and YouTube videos are essential tools for learning CSS, but it's also worth pointing out Josh Comeau's excellent material.

  - key: resources.podcasts.takeaway.css2024
    t: >
      Syntax may retain its top spot for now, but Web Standards and The CSS Podcast show that you can be quite successful by addressing a specific language or topic.

  - key: resources.video_creators.takeaway.css2024
    t: >
      Kevin Powell shows once again that when it comes to CSS on YouTube, nobody else can quite match his reach and popularity.

  - key: resources.people.takeaway.css2024
    t: >
      While Kevin takes the lead here once more, it's nice to see Adam, Una, Josh, and Lea's work recognized by the community!

  - key: resources.other_surveys.takeaway.css2024
    t: >
      You won't be surprised to hear that we consider surveys an essential learning tool – and for that reason we're always on the lookout for new competit… I mean, friends!

  ###########################################################################
  # Awards
  ###########################################################################

  - key: award.most_used_feature_award.comment
    t: |
      **필터 효과**는 한동안 사용되어 왔으며, 여전히 매우 유용하게 활용되고 있습니다!

  - key: award.least_used_feature_award.comment
    t: |
      `hanging-punctuation`은 가장 잘 알려지지 않은 CSS 기능으로 상을 받을 만한 자격이 있습니다!

  - key: award.most_loved_feature_award.comment
    t: |
      응답자의 {value}%가 서브그리드에 긍정적인 인상을 보여, 순위에서 1위를 차지했습니다.

  - key: award.most_commented_feature_award.comment
    t: |
      **Subgrid**는 설문 초반에 등장한 것도 한몫했지만, 정말 칭찬할 만한 기능이기 때문에 {value}개 이상의 댓글을 받았습니다!

  ###########################################################################
  # Conclusion
  ###########################################################################

  - key: conclusion.css2024.ahmad_shadeed
    t: |
      <span class="first-line">지난 2년 동안 CSS는 매우 많이 발전하여</span> 모든 새로운 기능을 따라잡는 것이 마치 풀타임 직업처럼 느껴질 정도입니다. 이는 탐구하고 실험할 주제와 아이디어가 많다는 것을 의미합니다.

      예를 들어, 오랜 기간 요청되어 온 CSS `:has()`는 CSS에 추가된 가장 강력한 기능 중 하나로, JavaScript의 필요성을 크게 줄여주었습니다. 개인적으로, 이는 CSS 플로트를 사용하던 방식에서 Flexbox로의 전환과 비슷하게, 우리가 상상할 수 있는 거의 모든 레이아웃을 만들 수 있게 해 준 발전이라고 생각합니다.

      CSS **container size 와 style queries** 또한 다양한 컨텍스트에서 작동해야 하는 컴포넌트를 구축하는 데 있어 획기적인 기능입니다. 현재는 모든 주요 브라우저에서 크기 컨테이너 쿼리만이 완전하게 지원되고 있지만, 그 사용은 아직 제한적입니다.

      2025년을 내다보며, size container queries의 더 넓은 사용, **스크롤 기반 애니메이션**과 style queries, 그리고 **anchor positioning**에 대한 모든 브라우저의 완전한 지원을 기대합니다. 더 바랄 것이 있을까요?

  - key: conclusion.css2024.ahmad_shadeed.bio
    t: 디자인 엔지니어이자 [Debugging CSS](https://debuggingcss.com/)의 저자

  ###########################################################################
  # Picks
  ###########################################################################

  - key: picks.my_pick
    t: "2024년 나의 선택: "
  - key: picks.intro
    t: 우리는 CSS 커뮤니티의 멤버들에게 그들의 "올해의 선택"을 공유해달라고 요청했습니다.
  - key: picks.chris_coyier.name
    t: Google의 CSS 기여

  - key: picks.chris_coyier.bio
    t: CodePen 창립자이자 Shoptalk Show 진행자

  - key: picks.chris_coyier.description
    t: |
      최근 특히 지난 1년간 CSS 분야에서 구글이 강력한 영향력을 발휘해왔다는 이야기를 하고 싶어집니다. Rachel Andrew, Adam Argyle, Bramus Van Damme, Una Kravets, Tab Atkins, fantasai—이들은 모두 주로 공개적으로 대단하고 멋진 작업을 하고 있습니다.

      *참고: fantasai는 현재 Apple에서 근무하고 있습니다.*

  - key: picks.temani_afif.name
    t: |
      `@property`의 폭넓은 사용 가능성

  - key: picks.temani_afif.bio
    t: >
      [css-challenges.com](https://css-challenges.com)의 창립자

  - key: picks.temani_afif.description
    t: |
      아마도 올해 Firefox에 `@property` 지원이 추가되어 이 기능이 모든 브라우저에서 사용 가능해진 점을 언급할 것 같습니다. 이로 인해 많은 멋진 기능이 가능해졌습니다 (7월부터 지원 시작).ocking a lot of cool stuff.

  - key: picks.adam_argyle.name
    t: |
      `linear()`
  - key: picks.adam_argyle.bio
    t: Google
  - key: picks.adam_argyle.description
    t: |
      linear() easing 함수는 인터랙션에 놀라운 마무리 효과를 더할 수 있게 해주었습니다.

  - key: picks.andy_bell.name
    t: |
      막히는 부분: `position:sticky`가 실패할 수 있는 모든 방식

  - key: picks.andy_bell.bio
    t: Piccalilli와 Set Studio의 설립자이자 디자이너, 개발자.

  - key: picks.andy_bell.description
    t: |
      CSS를 다룬 여러 해 동안 `position: sticky`는 가장 *짜증나는* 기능 중 하나였지만, 동시에 매우 유용하기도 했습니다. 항상 이를 도와줄 가이드를 쓰고 싶었지만 다행히도 그럴 필요가 없었습니다. Kilian이 이 부분을 완벽히 해결해 주었기 때문입니다.

  - key: picks.miguel_angel_duran.name
    t: |
      `@view-transition`

  - key: picks.miguel_angel_duran.bio
    t: 트위치 콘텐츠 크리에이터

  - key: picks.miguel_angel_duran.description
    t: |
      새로운 `@view-transition` CSS at-rule은 2024년에 혁신적인 변화를 불러올 기능입니다. 이 기능을 통해 개발자들은 페이지나 컴포넌트 간 부드럽고 자연스러운 전환을 최소한의 코드로 구현할 수 있어, JavaScript에 많이 의존하던 솔루션의 필요성을 크게 줄여줍니다. 이는 웹 개발에서 역동적이고 유려한 인터페이스를 구축하는 데 있어 큰 발전을 의미합니다!

  - key: picks.sacha_greif.name
    t: Sara Soueidan

  - key: picks.sacha_greif.bio
    t: State of CSS의 창립자

  - key: picks.sacha_greif.description
    t: |
      우리가 모두 디지털 영역에서 일하고 있지만, 이 모든 것이 전 세계 갈등의 결과를 겪어야 하는 실제 사람들에 의해 가능해진다는 사실을 기억하는 것이 중요합니다. 최근 Sara는 전쟁으로 인해 집을 떠나야 했고, 그녀가 곧 멋진 작업을 다시 시작할 수 있기를 바랄 뿐입니다!

  - key: picks.augustin_mauroy.name
    t: |
      `:has()`
  - key: picks.augustin_mauroy.bio
    t: 웹 개발자 & 오픈 소스 소프트웨어 애호가

  - key: picks.augustin_mauroy.description
    t: |
      `:has` 의사 클래스는 정말 창의적인 작업을 가능하게 해줍니다. 또한 “상위 요소로 거슬러 올라가는” 기능도 제공하여, 예를 들어 하위 요소 중 하나에 호버할 때 지도의 모양이 변경되는 효과를 구현할 수도 있습니다.

  - key: picks.lea_verou.name
    t: Style Queries 와 `if()`

  - key: picks.lea_verou.bio
    t: Font Awesome의 제품 리드

  - key: picks.lea_verou.description
    t: |
      제가 선택한 기능은 style queries와 인라인 `if()`입니다. 이 두 가지가 모든 브라우저에서 지원되기 시작하면, CSS 변수로 할 수 있는 일이 10배는 늘어날 것입니다.

  # - key: picks.xxx.name
  #   t: State Queries
  # - key: picks.xxx.bio
  #   t:
  # - key: picks.xxx.description
  #   t: |
  #     I'd pick State Queries, even if we aren't there yet, I feel like this has been a missing piece for quite some time now.

  #     Applying styles once an element becomes sticky or starts to overflow isn't a game changer persé, because it could've been achieved with JS before. But being able to achieve this without any JS is a great addition next to scroll driven animations and view transitions to bring the power of styling and animations back to CSS.

  - key: picks.ahmad_shadeed.name
    t: 스크롤 기반 애니메이션

  - key: picks.ahmad_shadeed.bio
    t: >
      [Debugging CSS](https://debuggingcss.com/)의 저자이자 디자인 엔지니어

  - key: picks.ahmad_shadeed.description
    t: |
      이는 모든 주요 브라우저에서 곧 지원될 획기적인 기능입니다. 예전에는 많은 JavaScript가 필요했던 작업을 이제는 단 몇 줄의 CSS로 구현할 수 있다는 점이 놀랍습니다.

  - key: picks.josh_comeau.name
    t: Temani Afif

  - key: picks.josh_comeau.bio
    t: 인디 해커이자 교육자

  - key: picks.josh_comeau.description
    t: |
      Temani는 CSS로 할 수 있는 것의 한계를 계속해서 넓혀가고 있습니다. 그의 실험은 항상 놀랍습니다!

  # - key: picks.xxx.name
  #   t:
  # - key: picks.xxx.bio
  #   t:
  # - key: picks.xxx.description
  #   t: |

  ###########################################################################
  # Quiz
  ###########################################################################

  - key: quiz.quiz_dave_shea
    t: "질문 01"

  - key: quiz.quiz_dave_shea.question
    t: >
      2003년 5월, Dave Shea가 CSS의 유연성과 적응력을 보여주는 사이트를 출시했습니다. 그 사이트의 이름은 무엇일까요?

  - key: options.quiz_dave_shea.css_playground
    t: CSS Playground

  - key: options.quiz_dave_shea.style_jungle
    t: Style Jungle

  - key: options.quiz_dave_shea.css_zen_garden
    t: CSS Zen Garden

  - key: quiz.quiz_dave_shea.answer
    t: >
      [CSS Zen Garden](https://www.csszengarden.com/)은 마크업과 스타일을 분리할 때 가능한 것들을 보여주며 큰 인상을 남겼습니다.
  - key: quiz.quiz_dave_shea.description
    aliasFor: quiz.quiz_dave_shea.question

  - key: quiz.quiz_css_spec
    t: "질문 02"
  - key: quiz.quiz_css_spec.question
    t: >
      다음 중 어떤 조직이 CSS 명세를 관리하고 있을까요?

  - key: options.quiz_css_spec.w3c
    t: W3C
  - key: options.quiz_css_spec.w3schools
    t: W3Schools
  - key: options.quiz_css_spec.mdn
    t: MDN
  - key: quiz.quiz_css_spec.answer
    t: >
      W3C의 [CSS Working Group](https://www.w3.org/groups/wg/css)이 CSS 명세를 관리하며, 이후 브라우저 벤더들이 이를 구현합니다.

  - key: quiz.quiz_css_spec.description
    aliasFor: quiz.quiz_css_spec.question

  ###########################################################################
  # Sponsors
  ###########################################################################

  - key: sponsors.frontendmasters.description
    t: 심도 있고 현대적인 프론트엔드 엔지니어링 강좌로 실력을 향상하세요.

  - key: sponsors.polypane.description
    t: 야심 찬 개발자를 위한 브라우저. 반응형, 접근성 높은, 빠른 웹사이트를 손쉽게 구축하세요.

  - key: sponsors.nijibox.description
    t: 도쿄 중심부에서 제공하는 UX 및 제품 개발 컨설팅.

  - key: sponsors.renderatl.description
    t: 디자인 및 CSS 트랙이 마련된 최대 규모의 기술 컨퍼런스.

  - key: sponsors.google_chrome.description
    t: 저희 작업을 지원해 준 Google Chrome 팀에 감사드립니다.

  - key: sponsors.tokyodev.description
    t: 오늘 일본에서 꿈의 개발자 직업을 찾아보세요.

  ###########################################################################
  # FAQ/About
  ###########################################################################

  - key: faq.how_long_will_survey_take_css2024
    t: 설문 조사에 얼마나 시간이 걸리나요?

  - key: faq.how_long_will_survey_take_css2024.description
    t: >
      답변하는 질문 수에 따라 달라지며(모든 질문은 건너뛸 수 있습니다), 
      설문 조사를 완료하는 데 약 15-20분 정도 걸릴 것입니다.

  - key: faq.learn_more_css2024
    t: 더 알아보려면 어디에서 확인할 수 있나요?

  - key: faq.learn_more_css2024.description
    t: 이 설문 조사에 대한 자세한 내용은 [공지 게시물](https://dev.to/sachagreif/the-2024-state-of-css-survey-is-now-open-4o5h)에서 확인할 수 있습니다.

  - key: faq.survey_design_css2024
    t: 이 설문 조사는 어떻게 설계되었나요?

  - key: faq.survey_design_css2024.description
    t: >
      이 설문 조사는 브라우저 벤더와 웹 개발 커뮤니티가 참여한 [오픈 디자인 프로세스](https://github.com/Devographics/surveys/issues/245)의 결과로 설계되었습니다.

  - key: faq.results_released_css2024
    t: 결과는 언제 공개되나요?

  - key: faq.results_released_css2024.description
    t: 설문 조사는 2024년 8월 17일부터 9월 7일까지 진행되며, 결과는 곧 공개될 예정입니다.

  - key: about.content
    t: >
      2023 State of CSS 설문 조사는 2024년 8월 17일부터 9월 12일까지 진행되어 9,704개의 응답을 수집했습니다. 이 설문 조사는 [Devographics](https://www.devographics.com/)가 오픈 소스 기여자와 컨설턴트 팀의 도움을 받아 운영합니다.

      State of CSS 로고와 티셔츠는 [Christopher Kirk-Nielsen](http://chriskirknielsen.com/)이 디자인하고 애니메이션으로 제작했습니다.

      ### 설문 목표

      이 설문 조사는 웹 개발 생태계의 새로운 트렌드를 파악하여 개발자들이 기술적 선택을 하는 데 도움을 주기 위해 만들어졌습니다.

      따라서 이 설문 조사는 현재의 인기를 분석하기보다는 앞으로 몇 년간 다가올 트렌드를 예상하는 데 중점을 두고 있으며, 그 때문에 현재 가장 널리 사용되는 기능이나 기술이 항상 포함되지는 않습니다.

      또한 설문 데이터는 브라우저 벤더들이 기능의 우선순위를 정하고 [Interop 2024](https://web.dev/blog/interop-2024)와 같은 이니셔티브를 추진하는 데 참고 자료로도 사용됩니다.


      ### 설문 설계

      이 설문 조사는 [GitHub에서](https://github.com/Devographics/surveys/issues/245). 협업하여 설계되었습니다.


      ### 설문 대상

      이 설문 조사는 온라인에서 누구나 접근할 수 있었으며, 응답자들은 특정 기준으로 필터링되거나 선택되지 않았습니다. 응답자들은 주로 이전 설문 조사 참여자(전용 메일링 리스트를 통해 알림을 받은 사람들)와 소셜 미디어 유입 사용자들로 구성되었습니다.

      ### 프로젝트 자금 지원

      티셔츠 판매 외에도, 이 프로젝트의 자금은 다양한 출처에서 지원받고 있습니다:

      - 파트너사인 [Frontend Masters](https://frontendmasters.com/)는 각 페이지 하단에 자사 강좌 관련 링크를 노출하는 대가로 설문 조사를 후원하고 있습니다.

      - [Google Chrome](https://www.google.com/chrome/) 팀은 설문 조사의 디자인과 운영을 지원하기 위해 올해 후원 예산을 배정했습니다.

      - [TokyoDev](https://www.tokyodev.com/) 역시 지속적으로 설문 조사를 후원하고 있습니다.

      ### 기술 개요

      설문 조사가 어떻게 운영되는지에 대한 보다 심도 있는 기술 개요는 [여기](https://dev.to/sachagreif/how-the-devographics-surveys-are-run-2023-edition-1p6a)에서 확인할 수 있습니다. 또한, 저희 코드는 [오픈 소스](https://github.com/Devographics/Monorepo/)로 공개되어 있습니다.

      ### 피드백

      - [기술적 문제 신고하기](https://github.com/Devographics/Monorepo/issues)

      - [내년을 위한 제안 하기](https://github.com/Devographics/surveys/issues/249)

      - [기술적이지 않은 기타 문제](https://github.com/Devographics/surveys/issues)

      - [디스코드에 참여하세요](https://discord.gg/tuWRUWVyJs)
