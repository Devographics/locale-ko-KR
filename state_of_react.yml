locale: ko-KR
translations:
  ###########################################################################
  # General
  ###########################################################################

  - key: general.state_of_react.intro
    t: |
      React는 이제 꽤 오랫동안 사용되어 왔으며, 주요 프론트엔드 프레임워크 중 하나로 자리 잡았음이 분명합니다.

      그럼에도 불구하고 React는 여전히 빠른 속도로 진화하고 있으며, 커뮤니티는 최선을 다해 이를 따라가고 있습니다.

      우리는 State of React 설문조사를 통해 이러한 변화를 이해하는 것에 도움을 주고자 하고, 개발자들이 방대한 React 생태계에서 방향성을 찾아갈 수 있기를 기대합니다.

  - key: general.state_of_react.description
    t: React 생태계에 대한 연례 개발자 설문조사

  - key: features.features_intro_react
    t: |
      설문에 참여하신 것을 환영합니다! 첫 번째 파트는 React 공식 API를 얼마나 알고 얼마나 사용하는지에 중점을 두고 있습니다.

      그리고 여러분의 선택 사항에 대해 더 자세히 답변하고 싶으시다면, 작은 "말풍선" 아이콘을 클릭해 주세요!

  - key: tools.tools_intro_react
    t: |
      다음 섹션들은 React 생태계를 이루는 **라이브러리**와 **프레임워크**를 집중해서 다룹니다. 여러분들이 기대되는 부분에 대해서 알려주세요!

  # sections
  - key: sections.main_apis.title
    t: 주요 API
  - key: sections.main_apis.description
    t: 안정적이고 확립된 React 기능

  - key: sections.hooks.title
    t: Hooks (훅)
  - key: sections.hooks.description
    t: React의 내장 Hook들

  - key: sections.new_apis.title
    t: 새로운 API
  - key: sections.new_apis.description
    t: 최근에 소개되었거나 실험적인 기능

  - key: sections.component_libraries.title
    t: 컴포넌트 라이브러리
  - key: sections.component_libraries.description
    t: 프론트엔드를 구성하는 기본 요소

  # - key: sections.data_management.title
  #   t: Data Management
  # - key: sections.data_management.description
  #   t: Loading and managing application data

  - key: sections.state_management.title
    t: 상태 관리
  - key: sections.state_management.description
    t: 애플리케이션의 상태를 관리하기 위한 라이브러리

  - key: sections.data_loading.title
    t: 데이터 로딩
  - key: sections.data_loading.description
    t: 데이터 로딩 및 관리를 위한 유틸리티

  - key: sections.back_end_infrastructure.title
    t: 백엔드 및 인프라
  - key: sections.back_end_infrastructure.description
    t: 앱 번들링 및 배포

  # - key: sections.usage.title
  #   t: Back-End & Infrastructure
  # - key: sections.usage.description
  #   t: Bundling & serving your app

  # old sections

  # - key: sections.ui_libraries.title
  #   t: UI Libraries
  # - key: sections.ui_libraries.description
  #   t: Component libraries and other UI toolkits.

  # - key: sections.meta_frameworks.title
  #   t: Meta Frameworks
  # - key: sections.meta_frameworks.description
  #   t: Frameworks that help render and serve your React app

  # - key: sections.testing.title
  #   t: Testing
  # - key: sections.testing.description
  #   t: Testing utilities and libraries

  - key: sections.other_tools.title
    t: 기타 도구
  - key: sections.other_tools.description
    t: 기타 React 유틸리티 및 라이브러리

  - key: sections.usage_react.title
    t: 사용 방식
  - key: sections.usage_react.description
    t: 평소 React를 어떻게 사용하는지에 대해

  - key: tools.data_loading_heading
    t: 데이터 로딩 라이브러리

  - key: tools.state_management_heading
    t: 상태 관리 라이브러리

  # features

  - key: features.main_apis_pain_points
    t: 주요 API의 페인 포인트
  - key: features.main_apis_pain_points.question
    t: 위에서 언급된 API와 관련된 어떤 어려움 또는 문제점을 경험했나요?

  - key: features.hooks_pain_points
    t: Hooks 페인 포인트
  - key: features.hooks_pain_points.question
    t: Hook과 관련된 어떤 어려움 또는 문제점을 경험했나요?

  - key: features.new_apis_pain_points
    t: 새로운 API의 페인 포인트

  - key: features.new_apis_pain_points.question
    t: 새로운 API와 관련된 어떤 어려움 또는 문제점을 경험했나요?

  # main features
  - key: features.fragment.description
    t: >
      주로 `<>...</>` 문법으로 사용되는 `<Fragment>`는 별도로 감싸는 노드를 만들지 않고도 요소들을 묶을 수 있게 해줍니다.

  - key: features.profiler.description
    t: >
      `<Profiler>`는 React 트리의 렌더링 성능을 프로그래밍적으로 측정할 수 있게 해줍니다.

  - key: features.strictmode.description
    t: >
      `<StrictMode>`는 개발 과정에서 컴포넌트에 발생하는 흔한 버그들을 빠르게 발견할 수 있게 해줍니다.

  - key: features.createportal.description
    t: >
      `createPortal`은 일부 자식 요소를 DOM의 다른 장소에 렌더링할 수 있게 해줍니다.

  - key: features.createcontext.description
    t: >
      `createContext`는 컴포넌트가 제공하거나 읽을 수 있는 context를 생성할 수 있게 해줍니다.

  - key: features.forwardref.description
    t: >
      `forwardRef`는 컴포넌트의 DOM 노드를 부모 컴포넌트에 노출시킬 수 있게 해 줍니다.

  - key: features.lazy.description
    t: >
      `lazy`는 컴포넌트 코드의 로딩을 첫 렌더링 전까지 지연시킬 수 있게 해줍니다.

  - key: features.memo.description
    t: >
      `memo`는 컴포넌트의 속성(props)이 변경되지 않았을 때 재렌더링을 건너뛸 수 있게 해줍니다.

  - key: features.createroot.description
    t: >
      `createRoot`는 브라우저 DOM 노드 내에 React 컴포넌트를 표시할 수 있는 루트를 생성할 수 있게 해줍니다.

  - key: features.hydrateroot.description
    t: >
      `hydrateRoot`는 `react-dom/server`가 사전에 생성한 HTML 콘텐츠의 브라우저 DOM 노드에 React 컴포넌트를 연동할 수 있게 해줍니다.

  # hooks

  - key: features.usecallback.description
    t: >
      `useCallback`은 리렌더링 간에 함수 정의를 캐시할 수 있게 해주는 React Hook입니다.

  - key: features.usecontext.description
    t: >
      `useContext`는 컴포넌트에서 context를 읽고 구독할 수 있게 해주는 React Hook입니다.

  - key: features.usedebugvalue.description
    t: >
      `useDebugValue`는 커스텀 훅에 React 개발자 도구에 표시되는 레이블을 추가할 수 있게 해주는 React Hook입니다.

  - key: features.usedeferredvalue.description
    t: >
      `useDeferredValue`는 UI 중 일부의 업데이트를 지연시킬 수 있게 해주는 React Hook입니다.

  - key: features.useeffect.description
    t: >
      `useEffect`는 컴포넌트를 외부 시스템과 동기화할수 있게 해주는 React Hook입니다.

  - key: features.useid.description
    t: >
      `useId`는 접근성 특성(HTML attribute)에 전달할 수 있는 고유한 아이디를 생성하는 용도의 React Hook입니다.

  - key: features.usememo.description
    t: >
      `useMemo`는 리렌더링 간에 계산 결과를 캐시할 수 있게 해주는 React Hook입니다.

  - key: features.usereducer.description
    t: >
      `useReducer`는 컴포넌트에 리듀서(reducer)를 추가할 수 있게 해주는 React Hook입니다.

  - key: features.useref.description
    t: >
      `useRef`는 렌더링이 의존하지 않는 값을 참조할 수 있게 해주는 React Hook입니다.

  - key: features.usestate.description
    t: >
      `useState`는 컴포넌트에 상태 변수를 추가할 수 있게 해주는 React Hook입니다.

  - key: features.usesyncexternalstore.description
    t: >
      `useSyncExternalStore`는 외부 저장소를 구독할 수 있게 해주는 React Hook입니다.

  - key: features.usetransition.description
    t: >
      `useTransition`은 UI를 블로킹하지 않고 상태를 갱신할 수 있게 해주는 React Hook입니다.

  # new features

  - key: features.suspense.description
    t: >
      `<Suspense>`를 사용하면 자식 요소가 로딩을 완료할 때까지 대체 콘텐츠(fallback)를 표시할 수 있습니다.

  - key: features.use_hook.description
    t: >
      `use`는 Promise 또는 context 같은 리소스의 값을 읽을 수 있게 해주는 React Hook입니다.

  - key: features.usetransition.description
    t: >
      `useTransition`은 UI를 블로킹하지 않고 상태를 갱신할 수 있게 해주는 React Hook입니다.

  - key: features.starttransition.description
    t: >
      `startTransition`을 사용하면 UI를 블로킹하지 않고 상태를 갱신할 수 있습니다.

  - key: features.react_server_components.description
    t: >
      서버에서만 실행되는 컴포넌트입니다.

  - key: features.use_client.description
    t: >
      `'use client'`는 클라이언트에서 실행되는 컴포넌트의 소스 파일을 명시하는 역할입니다.

  - key: features.use_server.description
    t: >
      `'use server'`는 클라이언트측 코드에서 호출할 수 있는 서버측 함수를 명시하는 역할입니다.

  - key: features.server_actions.description
    t: >
      server mutation을 위한 React의 내장 솔루션입니다.

  - key: features.taint_api.description
    t: >
      특정한 객체나 값이 클라이언트 컴포넌트로 전달되는 것을 방지합니다.

  - key: features.cache.description
    t: >
      `cache`를 사용하면 데이터 조회(fetch) 또는 계산의 결과를 캐시할 수 있습니다.

  - key: features.useformstatus.description
    t: >
      `useFormStatus`는 마지막 폼(form) 제출에 대한 상태 정보를 제공하는 훅입니다.

  - key: features.useformstate.description
    t: >
      `useFormState`는 폼(form) action의 결과를 바탕으로 상태를 업데이트할 수 있게 해주는 React Hook입니다.

  # tools

  - key: tools.component_libraries_others
    t: 기타 라이브러리
  - key: tools.component_libraries_others.question
    t: 그 외에 어떤 컴포넌트 라이브러리를 사용해 봤나요?

  - key: tools.component_libraries_pain_points
    t: 컴포넌트 페인 포인트
  - key: tools.component_libraries_pain_points.question
    t: 컴포넌트 라이브러리를 사용할 때 어떤 어려움 또는 문제점을 경험했나요?

  # - key: tools.ui_libraries_happiness
  #   t: Happiness
  # - key: tools.ui_libraries_happiness.description
  #   t: How happy are you with the state of UI libraries?

  - key: tools.state_management_others
    t: 기타 상태 관리 라이브러리
  - key: tools.state_management_others.question
    t: 그 외에 상태 관리를 위해 어떤 라이브러리를 사용해 봤나요?

  - key: tools.state_management_pain_points
    t: 상태 관리 페인 포인트
  - key: tools.state_management_pain_points.question
    t: 상태 관리를 할 때 어떤 어려움 또는 문제점을 경험했나요?

  # - key: tools.state_management_happiness
  #   t: Happiness
  # - key: tools.state_management_happiness.description
  #   t: How happy are you with the available state management libraries?

  - key: tools.data_loading_others
    t: 기타 데이터 로딩 라이브러리
  - key: tools.data_loading_others.question
    t: 그 외에 데이터 로딩을 위해 어떤 라이브러리를 사용해 봤나요?

  - key: tools.data_loading_pain_points
    t: 데이터 로딩 페인 포인트
  - key: tools.data_loading_pain_points.question
    t: 데이터 로딩을 할 때 어떤 어려움 또는 문제점을 경험했나요?

  # - key: tools.data_loading_happiness
  #   t: Happiness
  # - key: tools.data_loading_happiness.description
  #   t: How happy are you with the state of data loading libraries?

  - key: tools.meta_frameworks_others
    t: 기타 메타 프레임워크
  # - key: tools.meta_frameworks_happiness
  #   t: Happiness
  # - key: tools.meta_frameworks_happiness.description
  #   t: How happy are you with the current state of meta-frameworks?

  - key: tools.meta_frameworks_heading
    t: 메타 프레임워크

  - key: tools.other_back_end_tools_heading
    t: 기타 백엔드 도구 & 서비스

  - key: tools.back_end_infrastructure_pain_points
    t: 백엔드 페인 포인트
  - key: tools.back_end_infrastructure_pain_points.question
    t: 백엔드, 인프라와 관련된 어떤 어려움 또는 문제점을 경험했나요?

  - key: other_tools.testing
    t: 테스팅 라이브러리
  - key: other_tools.testing.question
    t: React 앱을 테스트하기 위해 어떤 라이브러리를 사용해 봤나요?

  # - key: tools.testing_happiness
  #   t: Happiness
  # - key: tools.testing_happiness.description
  #   t: How happy are you with the current state of testing libraries?

  - key: other_tools.mobile_development
    t: 모바일 개발
  - key: other_tools.mobile_development.question
    t: 모바일 개발을 위해 어떤 라이브러리를 사용해 봤나요?

  # - key: tools.mobile_development_others
  #   t: Other Mobile Development Tools
  # - key: tools.mobile_development_happiness
  #   t: Happiness
  # - key: tools.mobile_development_happiness.description
  #   t: How happy are you with the current state of mobile development?

  # other tools
  - key: other_tools.form_libraries
    t: 폼(form) 라이브러리
  # - key: other_tools.form_libraries.description
  #   t: Libraries for generating and validating forms.
  - key: other_tools.form_libraries.question
    t: 어떤 폼(form) 라이브러리를 사용해 봤나요?
  - key: options.form_libraries.na
    t: 해당사항 없음

  - key: other_tools.build_tools
    t: 빌드 도구
  # - key: other_tools.build_tools.description
  #   t: Build tools and bundlers.
  - key: other_tools.build_tools.question
    t: 어떤 빌드 도구나 번들러를 사용해 봤나요?

  - key: other_tools.animation_libraries
    t: 애니메이션
  # - key: other_tools.animation.description
  #   t: Libraries to help manage animations and transitions.
  - key: other_tools.animation_libraries.question
    t: 어떤 애니메이션 라이브러리를 사용해 봤나요?

  - key: other_tools.auth
    t: 인증
  # - key: other_tools.auth.description
  #   t: Libraries and services for managing authentication and accounts.
  - key: other_tools.auth.question
    t: 인증을 처리하기 위해 어떤 라이브러리와 서비스를 사용해 봤나요?

  - key: other_tools.data_visualization_libraries
    t: 데이터 시각화
  # - key: other_tools.data_visualization.description
  #   t: Data visualization and graphics libraries.
  - key: other_tools.data_visualization_libraries.question
    t: 어떤 데이터 시각화 및 그래픽 라이브러리를 사용해 봤나요?

  - key: other_tools.css_tools
    t: CSS Tools & Libraries
  # - key: other_tools.css_tools.description
  #   t: CSS libraries, frameworks, and utilities you use to style your React app.
  - key: other_tools.css_tools.question
    t: 스타일링을 위해 어떤 라이브러리나 프레임워크를 사용해 봤나요?

  - key: other_tools.other_frontend_frameworks
    t: 기타 프론트엔드 프레임워크
  # - key: other_tools.other_frontend_frameworks.description
  #   t: >
  #     Other front-end frameworks
  - key: other_tools.other_frontend_frameworks.question
    t: >
      어떤 기타 프론트엔드 프레임워크를 사용해 봤나요?

  - key: other_tools.hosting
    t: 호스팅 서비스
  # - key: other_tools.hosting.description
  #   t: Services you use to host your React apps.
  - key: other_tools.hosting.question
    t: React 앱을 호스팅하기 위해 어떤 서비스를 사용해 봤나요?

  - key: other_tools.backend_language
    t: 백엔드 언어
  - key: other_tools.backend_language.question
    t: 백엔드 앱을 어떤 언어로 작성해 봤나요?

  - key: other_tools.other_services
    t: 다른 서비스
  - key: other_tools.other_services.question
    t: 다른 서비스를 사용해 봤나요?

  - key: other_tools.validation
    t: 스키마 & 검증 라이브러리
  - key: other_tools.validation.question
    t: 스키마로 데이터의 유효성을 검사하기 위해 어떤 라이브러리를 사용해 봤나요?

  - key: other_tools.ai_tools
    t: AI 도구
  - key: other_tools.ai_tools.question
    t: React 코드 작성 시 도움을 받기 위해 어떤 AI 도구나 서비스를 사용해 봤나요?

  - key: other_tools.renderers
    t: React 렌더러
  - key: other_tools.renderers.question
    t: React를 다른 플랫폼이나 환경에 렌더링하기 위해 어떤 라이브러리를 사용해 봤나요?

  - key: other_tools.other_tools
    t: 기타 도구
  - key: other_tools.other_tools.question
    t: React 앱을 개발하기 위해 어떤 기타 도구를 사용해 봤나요?

  # CSS
  - key: options.css_tools.plain_css
    t: CSS (plain, “vanilla” CSS)

  # react pain points

  - key: options.react_pain_points.rerenders
    t: 컴포넌트 리렌더링 관리
  - key: options.react_pain_points.testing
    t: 테스팅
  - key: options.react_pain_points.data_loading
    t: 데이터 로딩과 비동기 작업
  - key: options.react_pain_points.state_management
    t: 상태 관리 (`useState`, Redux, Context, etc.)
  - key: options.react_pain_points.bundle_sizes
    t: 클라이언트 번들 사이즈 최소화
  - key: options.react_pain_points.server_rendering
    t: 서버 사이드 렌더링 & 서버 컴포넌트
  - key: options.react_pain_points.css_styling
    t: CSS & 스타일링
  - key: options.react_pain_points.attribute_names
    t: “이상한” 속성 이름 (e.g. `className`, `htmlFor`, etc.)
  - key: options.react_pain_points.synthetic_events
    t: 합성 이벤트
  - key: options.react_pain_points.ref_management
    t: Ref 관리
  - key: options.react_pain_points.memoization
    t: 메모제이션
  - key: options.react_pain_points.animations
    t: 애니메이션 & 트랜지션
  - key: options.react_pain_points.forms
    t: 폼(form)
  - key: options.react_pain_points.typescript
    t: 네이티브 타입스크립트 공식 지원 부족

  # usage type
  - key: usage.react_usage_type
    t: React 용도
  - key: usage.react_usage_type.question
    t: React를 주로 어떤 용도로 사용하나요?

  # react version

  - key: usage.react_version
    t: React 버전
  - key: usage.react_version.question
    t: 가장 많이 사용하는 React 버전은 무엇인가요?

  - key: options.react_version.react_v16x
    t: 16.x
  - key: options.react_version.react_v17x
    t: 17.x
  - key: options.react_version.react_v18x
    t: 18.x
  - key: options.react_version.react_canary
    t: Canary
  - key: options.react_version.not_sure
    t: 잘 모르겠음

  # JS App Patterns

  - key: usage.js_app_patterns
    t: 애플리케이션 패턴
  - key: usage.js_app_patterns.question
    t: 다음 아키텍처, 렌더링 패턴 중 **지난 1년동안** 사용한 것은 무엇인가요?

  - key: options.js_app_patterns.single_page_app
    t: 싱글 페이지 애플리케이션 (SPA)
  - key: options.js_app_patterns.single_page_app.description
    t: 완전히 브라우저에서 실행되는 앱
  - key: options.js_app_patterns.multiple_page_app
    t: 멀티 페이지 애플리케이션 (MPA)
  - key: options.js_app_patterns.multiple_page_app.description
    t: 클라이언트 사이드의 동적 행위가 최소한인, 완전히 서버측에서 실행되는 앱
  - key: options.js_app_patterns.static_site_generation
    t: 정적 사이트 생성 (SSG)
  - key: options.js_app_patterns.static_site_generation.description
    t: 클라이언트 사이드의 동적 요소가 있거나 없을 수 있는, 사전 렌더링된 정적 콘텐츠
  - key: options.js_app_patterns.server_side_rendering
    t: 서버 사이드 렌더링 (SSR)
  - key: options.js_app_patterns.server_side_rendering.description
    t: 서버에서 HTML을 동적으로 렌더링하고 클라이언트에서 다시 하이드레이션
  - key: options.js_app_patterns.partial_hydration
    t: 부분적 하이드레이션
  - key: options.js_app_patterns.partial_hydration.description
    t: 컴포넌트 중 일부만 클라이언트에서 하이드레이션 (e.g. React 서버 컴포넌트)
  - key: options.js_app_patterns.progressive_rehydration
    t: 점진적 하이드레이션
  - key: options.js_app_patterns.progressive_rehydration.description
    t: 클라이언트에서 컴포넌트 하이드레이션 순서를 제어
  - key: options.js_app_patterns.islands_architecture
    t: 아일랜드 아키텍처
  - key: options.js_app_patterns.islands_architecture.description
    t: 동적 동작을 제공하는 여러 독립적인 아일랜드 영역의 엔트리 포인트를 제공하는 정적 사이트 (Astro, Eleventy)
  - key: options.js_app_patterns.progressive_enhancement
    t: 점진적 향상법 (Progressive Enhancement)
  - key: options.js_app_patterns.progressive_enhancement.description
    t: 자바스크립트 없이도 앱의 동작을 보장
  - key: options.js_app_patterns.incremental_static_generation
    t: 점진적 정적 생성 (ISR)
  - key: options.js_app_patterns.incremental_static_generation.description
    t: 최초 빌드 후에도 정적 사이트를 동적으로 확장 또는 수정 가능 (Next.js ISR, Gatsby DSG)
  - key: options.js_app_patterns.streaming_ssr
    t: 스트리밍 SSR
  - key: options.js_app_patterns.streaming_ssr.description
    t: 서버 렌더링 된 콘텐츠를 더 작은 청크로 분할해 스트리밍
  - key: options.js_app_patterns.resumability
    t: 재개 가능성 (Resumability)
  - key: options.js_app_patterns.resumability.description
    t: 클라이언트가 코드 중복 실행 없이 실행을 재개할 수 있도록 서버에서 프레임워크 상태 직렬화
  - key: options.js_app_patterns.edge_rendering
    t: 엣지 렌더링
  - key: options.js_app_patterns.edge_rendering.description
    t: 렌더링 된 HTML을 클라이언트로 보내기 전 엣지에서 조작

  - key: options.js_app_patterns.micro_frontend
    t: 마이크로 프론트엔드
  - key: options.js_app_patterns.domain_driven_design
    t: 도메인 드리븐 디자인 (DDD)
  - key: options.js_app_patterns.serverless
    t: 서버리스
  - key: options.js_app_patterns.pespa
    t: PESPA

  - key: usage.what_do_you_use_react_for
    t: React 용도
  - key: usage.what_do_you_use_react_for.question
    t: React를 어떤 용도로 사용하나요?

  - key: usage.react_pain_points
    t: React 페인 포인트

  - key: usage.state_of_react
    t: 만족도
  - key: usage.state_of_react.question
    t: React의 현황에 대해 얼마나 만족하나요?

  - key: usage.usage_pain_points
    t: 기타 페인 포인트
  - key: usage.usage_pain_points.question
    t: 언급하고 싶은 React의 어려움이나 문제점이 있을까요?

  # new features
  - key: usage.new_features
    t: 새로운 기능
  - key: usage.new_features.question
    t: 최근에 나왔거나 출시가 예정된 새로운 기능 중 어떤 것들이 가장 흥미롭나요?

  - key: options.new_features.asset_loading
    t: 에셋 로딩
  - key: options.new_features.asset_loading.description
    t: 스타일시트, 폰트, 이미지를 로딩하는 라이프사이클과 Suspense의 완전한 통합
  - key: options.new_features.cache.description
    t: 데이터 캐싱을 지원하는 API
  - key: options.new_features_react_forget.description
    t: 반응성을 자동으로 최적화하는 React 컴파일러
  - key: options.new_features.new_docs
    t: 새로운 문서
  - key: options.new_features.new_docs.description
    t: React의 새로운 문서 사이트
  - key: options.new_features.offscreen_rendering
    t: 오프스크린 렌더링
  - key: options.new_features_offscreen_rendering.description
    t: 추가적인 성능 오버헤드 없이 화면을 백그라운드에서 렌더링
  - key: options.new_features.use_hook
    t: >
      `use` 훅
  - key: options.new_features.use_hook.description
    t: >
      `use`를 사용해 프로미스의 값을 언래핑할수 있는데, 클라이언트측을 포함한 일반 컴포넌트와 훅 내부에서도 사용 가능

  - key: options.new_features.transition_tracing
    t: 트랜지션 트레이싱
  - key: options.new_features.transition_tracing.description
    t: React 트랜지션이 느려질 때를 감지하고 그 이유를 분석

  # what do you use React for?
  - key: options.what_do_you_use_react_for.static_sites
    t: 정적 사이트
  - key: options.what_do_you_use_react_for.design_systems
    t: 디자인 시스템
  - key: options.what_do_you_use_react_for.web_apps
    t: 웹 앱
  - key: options.what_do_you_use_react_for.mobile_apps
    t: 모바일 앱
  - key: options.what_do_you_use_react_for.desktop_apps
    t: 데스크탑 앱

  # resources
  - key: resources.learning_methods_react
    t: 학습 방법
  - key: resources.learning_methods_react.question
    t: React를 학습하기 위해 어떤 종류의 자료를 사용하셨나요?

  - key: resources.blogs_news_magazines_react
    t: 블로그 & 뉴스레터
  - key: resources.blogs_news_magazines_react.question
    t: React의 최신 소식을 접하기 위해 어떤 블로그, 잡지, 뉴스레터를 참고하시나요?

  - key: resources.sites_courses_react
    t: 사이트 & 강의
  - key: resources.sites_courses_react.question
    t: React를 학습하기 위해 어떤 사이트/강의를 참고하시나요?

  - key: resources.podcasts_react
    t: 팟캐스트
  - key: resources.podcasts_react.question
    t: 어떤 React 또는 웹 개발 관련 팟캐스트를 들으시나요?

  - key: resources.video_creators_react
    t: 비디오 크리에이터
  - key: resources.video_creators_react.question
    t: 유튜브, 트위치 등에서 어떤 React 또는 웹 개발 비디오 크리에이터를 시청하시나요?

  - key: resources.people_react
    t: 인물
  - key: resources.people_react.question
    t: React 커뮤니티에서 읽거나 팔로우하는, 혹은 언급하고 싶은 인물이 있나요?
